spring:
  cache:
    type: simple
  codec:
    max-in-memory-size: 128MB
  servlet:
    multipart:
      max-file-size: ${MAX_FILE_SIZE:100MB}
      max-request-size: ${MAX_REQUEST_SIZE:100MB}
  mvc:
    async:
      request-timeout: -1
  application:
    name: knowledge_nexus
  datasource:
    name: ${spring.application.name}
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://${MYSQL_ADDRESS:localhost:3306}/knowledge_nexus?useUnicode=true&createDatabaseIfNotExist=true&characterEncoding=utf8&useCursorFetch=true&defaultFetchSize=500&allowMultiQueries=true&rewriteBatchedStatements=true&useSSL=false&allowPublicKeyRetrieval=true
    username: ${MYSQL_USERNAME:root}
    password: ${MYSQL_PASSWORD:123456}
  freemarker:
    cache: true
  flyway:
    baseline-on-migrate: on

server:
  port: ${SERVER_PORT:9876}
  forward-headers-strategy: framework

management:
  endpoints:
    web:
      exposure:
        include: "*"
springdoc:
  swagger-ui:
    enabled: on

auth:
  default-password: ${DEFAULT_PASSWORD:goodluck}
  # 1   登录
  # 2   注册
  # 3   首页
  # 4   对话
  # 5   文库
  # 6   系统管理
  # 7   文库管理
  # 8   角色管理
  # 9   用户管理
  # 10  屏蔽词管理
  # 11  操作日志
  # 12  系统设置
  # 13  新建对话
  default-role-permissions: ${DEFAULT_ROLE_PERMISSIONS:1,2,3,4,5,13}

jwt:
  jwt-key: ${JWT_PRIVATE_KEY:/opt/keys/jwt_key}
  key-id: ${JWT_KEY_ID:good_luck}
  issuer: ${JWT_ISSUER:happy}
  audience: ${JWT_AUDIENCE:happy}
  expiration: ${JWT_TOKEN_EXPIRATION:2h}
  # 临近超时时间10分钟内，会返回新的token
  refresh-interval: ${JWT_TOKEN_REFRESH_INTERVAL:10m}
  head: ${JWT_TOKEN_HEAD:auth}

logging:
  level:
    ai.zhidun.app.knowledge.security.auth.dao.UserMapper: debug
    ai.zhidun.app.knowledge.documents.dao.DocumentMapper: debug
    ai.zhidun.app.knowledge.chat.service.ChatService: debug
    software.amazon.awssdk: info
s3:
  access-key-id: ${S3_ACCESS_KEY:WcZgSbbXbuZUDSVPFy1K}
  secret-access-key: ${S3_SECRET_KEY:wlik3MjyTIVja2dhyxCRygmn2ndfU67wq1HhEr3l}
  endpoint: ${S3_ENDPOINT:http://192.168.2.56:9000}
  public-endpoint: ${S3_PUBLIC_ENDPOINT:http://113.108.105.54:56800/store}
  buckets:
    tmpfile: ${S3_TMPFILE_BUCKET:tmpfile}
    document: ${S3_DOCUMENT_BUCKET:document}
    blocked: ${S3_BLOCKED_BUCKET:blocked}
  cover:
    dpi: ${COVER_DPI:300}

document:
  import-local-root: ${IMPORT_ROOT:/opt/import/}

dify:
  tokens:
    translate: ${TRANSLATE_KEY:app-PftqV32Uc2tduyNQ7PlbWduT}
    chat-agent: ${CHAT_AGENT_KEY:app-jcG9W9XwTK07YGpaUHirtO7f}
  base-url: ${DIFY_URL:http://127.0.0.1}
  response-timeout: ${DIFY_RESPONSE_TIMEOUT:180s}
  rename-custom: ${RENAME_CUSTOM:false}

ollama:
  base-url: ${OLLAMA_URL:http://127.0.0.1:11434}
  response-timeout: ${OLLAMA_RESPONSE_TIMEOUT:180s}
  translate-template: ${OLLAMA_TRANSLATE_TEMPLATE:Translate the following English text to %s:%s}
  translate-system: >
    - Role: 专业翻译工程师
    - Background: 用户需要将外文文献翻译成中文简体，且指定使用 qwen2.5 模型，通过 ollama 的 API 接口调用模型进行翻译。
    - Profile: 你是一位精通多语言翻译的专业工程师，熟悉各种翻译模型和API接口的调用，能够高效准确地完成翻译任务。
    - Skills: 熟练掌握外文文献的阅读和理解能力，精通中文简体的表达和书写规范，熟悉 qwen2.5 模型的特性和优势，能够熟练使用 ollama 的 API 接口进行模型调用和参数配置。
    - Goals:
      1. 准确理解外文文献的内容和语境。
      2. 使用 qwen2.5 模型通过 ollama 的 API 接口进行翻译。
      3. 确保翻译结果准确、流畅，符合中文简体的表达习惯。
      4. 输出只包含翻译后的文本
    - Constrains: 翻译过程中必须使用 qwen2.5 模型，通过 ollama 的 API 接口进行调用，确保翻译的准确性和专业性。
    - OutputFormat: 翻译结果应为中文简体文本，格式清晰，无语法错误。
    - Workflow:
      1. 读取外文文献的内容，确保理解其语义和语境。
      2. 构造合适的 API 请求，包含外文文献内容和指定的 qwen2.5 模型参数。
      3. 调用 ollama 的 API 接口，获取翻译结果。
      4. 对翻译结果进行校对和优化，确保其准确性和流畅性。
    - Examples:
      - 例子1：外文文献内容为 “Hello, world!”，翻译结果应为 “你好，世界！”
      - 例子2：外文文献内容为 “This is a test document for translation.”，翻译结果应为 “这是一份翻译测试文档。”
      - 例子3：外文文献内容为 “Translation using qwen2.5 model via ollama API is efficient and accurate.”，翻译结果应为 “通过 ollama API 使用 qwen2.5 模型进行翻译，既高效又准确。
  translate-model: ${OLLAMA_TRANSLATE_MODEL:qwen2.5:14b}